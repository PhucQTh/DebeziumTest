{
  "openapi": "3.0.2",
  "info": {
    "title": "Bussiness central APIs",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.0.1"
  },

  "servers": [{ "url": "http://192.168.109.42:4000" }],
  "tags": [
    { "name": "database", "description": "Operations about database" }
  ],
  "paths": {
    "/api/get-primary-key": {
      "get": {
        "tags": ["database"],
        "summary": "Get primary key columns for tables",
        "description": "Retrieves the primary key columns for all tables within the specified database schema.",
        "operationId": "getPrimaryKey",
        "parameters": [
          {
            "name": "dbname",
            "in": "query",
            "description": "The name of the database schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "The server environment, either 'production' or other configurations",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["production", "other"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tables and their primary key columns",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "TABLE_NAME": {
                        "type": "string",
                        "description": "Name of the table"
                      },
                      "PK": {
                        "type": "array",
                        "description": "Primary key columns of the table",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid input supplied"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/binlog": {
      "get": {
        "tags": ["database"],
        "summary": "Show binary logs",
        "description": "Retrieves a list of binary logs from the server.",
        "operationId": "getBinaryLogs",
        "parameters": [
          {
            "name": "server",
            "in": "query",
            "description": "The server from which to retrieve the binary logs",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["production", "sft"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of binary logs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "Log_name": {
                        "type": "string",
                        "description": "The name of the binary log file"
                      },
                      "File_size": {
                        "type": "string",
                        "description": "The size of the binary log file"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Server name is wrong or missing parameters"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Deletes a specified binary log",
        "tags": ["database"],
        "description": "Purges the binary logs up to the specified log file.",
        "operationId": "deleteBinlog",
        "parameters": [
          {
            "name": "binlog",
            "in": "query",
            "description": "The name of the binary log to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "The server from which to purge the binary log. Use 'production' for the production server, otherwise it defaults to the soft environment.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["production", "soft"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Binary log deleted successfully"
          },
          "400": {
            "description": "Invalid query parameters"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/api/login": {
  "post": {
    "tags": ["Authentication"],
    "summary": "Log in a user",
    "description": "Authenticates user credentials and provides a JWT token for successful logins.",
    "requestBody": {
      "description": "Credentials for logging in",
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "example": "admin"
              },
              "password": {
                "type": "string",
                "example": "admin"
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Login successful",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "authorization": {
                  "type": "string",
                  "example": "success"
                },
                "token": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Forbidden, invalid credentials",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "authorization": {
                  "type": "string",
                  "example": "failed"
                },
                "message": {
                  "type": "string",
                  "example": "Invalid credentials"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error"
      }
    },
    "security": [
      {
        "BearerAuth": []
      }
    ]
  }
}


  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "username": { "type": "string", "example": "theUser" },
          "firstName": { "type": "string", "example": "John" },
          "lastName": { "type": "string", "example": "James" },
          "email": { "type": "string", "example": "john@email.com" },
          "password": { "type": "string", "example": "12345" },
          "phone": { "type": "string", "example": "12345" },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": { "name": "user" }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Pet" }
          },
          "application/xml": {
            "schema": { "$ref": "#/components/schemas/Pet" }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/User" }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": { "type": "apiKey", "name": "api_key", "in": "header" }
    }
  }
}
